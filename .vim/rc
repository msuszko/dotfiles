" vim: fdm=marker ts=2 sts=2 sw=2 fdl=0

" General options{{{

if v:progname =~? "evim"
  finish
endif

set nocompatible
filetype plugin indent on

set encoding=utf-8

" Whitespaces and tabs
set tabstop=8 softtabstop=2 shiftwidth=2 expandtab
" Use shiftwidth for tab with at the BOL, and tabstop in other places
" Otherwise, tabstop is used always. Shiftwidth is only used for >>
set smarttab

" Let buffer be switched to another one without requiring to save it first
set hidden

" Timeout settings
" Wait forever until I recall mapping
" Don't wait to much for keycodes send by terminal, so there's no delay on <ESC>
set notimeout
set ttimeout
set timeoutlen=2000
set ttimeoutlen=30

" Zsh like <Tab> completion in command mode
set wildmenu
set wildmode=full

set mouse=

" Set <leader> key to <Space>
nnoremap <Space> <Nop>
let mapleader=" "
let maplocalleader=","

" <Backspace> in Insert mode
set backspace=indent,eol,start

" Keep some characters visible during horizontal scroll
" Recenter cursor during horizontal scroll
set sidescroll=0
set sidescrolloff=3

" Minimal number of screen lines to keep above and below the cursor, expect for bol and eol
set scrolloff=2

" Status line
" Always show status line, even when 1 window is opened
set laststatus=2

" Highlight the line with a cursor
set cursorline

" Show cursorline in current window and not in insert mode
augroup aug_cursor_line
  au!
  au InsertEnter * setlocal nocursorline
  au InsertLeave * setlocal cursorline
augroup END

" Disable reading vim variables & options from special comments within file header or footer
set modeline
set modelines=1

" Display uncompleted commands in the status line
set showcmd

" Show ruler
set ruler

" Use /g flag for substitute command by default
set gdefault

" Tweak autocompletion behavior for <C-n>/<C-p> in insert mode
" Default is ".,w,b,u,t,i" without "i", where:
" . - scan current buffer. Same to invoking <C-x><C-n> individually
" w - buffers in other windows
" b - loaded buffers in buffer list
" u - unloaded buffers in buffer list
" t - tags. Same to invoking <C-x><C-]> individually
" i - included files. We don't need this.
" kspell, when spell check is active, use words from spellfiles
set complete-=i
set complete+=kspell


" Add @@@ marks on the last column of last line if there is more text below
set display=lastline

" Auto indentation
set autoindent
set smartindent
set pastetoggle=<F10>
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'

" Disable startup message
set shortmess+=I

" Conceal text and highlight with "Conceal" highlight group
set conceallevel=2

" }}}



" packages {{{
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'
"Plug 'ludovicchabant/vim-lawrencium'
Plug 'honza/vim-snippets'
Plug 'sjbach/lusty'
Plug 'sjl/gundo.vim'
Plug 'fatih/vim-go'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vim-scripts/indentpython.vim'
Plug 'w0rp/ale'
Plug 'tenable/vim-nasl'
Plug 'Olical/conjure'
Plug 'tpope/vim-dispatch'
"Plug 'clojure-vim/vim-jack-in'
" Only in Neovim:
Plug 'radenling/vim-dispatch-neovim'
"Plug 'Rykka/riv.vim'
Plug 'rking/ag.vim'
Plug 'bling/vim-airline'
Plug 'ryanoasis/vim-devicons'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/peaksea'
Plug 'airblade/vim-gitgutter'
Plug 'nvie/vim-flake8'
Plug 'fisadev/vim-isort'
"Plug 'sheerun/vim-polyglot'
Plug 'NLKNguyen/papercolor-theme'
Plug 'junegunn/seoul256.vim'
Plug 'jonathanfilip/vim-lucius'
Plug 'editorconfig/editorconfig-vim'
"Plug 'duganchen/vim-soy'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'github/copilot.vim'
Plug 'grafana/vim-alloy'
call plug#end()
" }}}


" completion {{{

let g:gundo_prefer_python3 = 1

" CoC
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" END CoC

" Required:

" }}}


let g:gitgutter_enabled = 1
let g:ale_sign_error = '☢'
let g:ale_sign_warning = '☹'
" highlight clear ALEErrorSign
highlight clear ALEWarningSign
let g:airline#extensions#ale#enabled = 1
let g:airline_theme='papercolor'
let g:ale_linters = {'python': ['flake8']}

let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor\ --column
  set grepformat=%f:%l:%c:%m,%f:%l:%m

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>


set nobackup
set history=1000
set undolevels=1000      " use many muchos levels of undo
if has('nvim')
  set viminfo=%,'500,\"1000,:1000,n~/.vim/nviminfo
else
  set viminfo=%,'500,\"1000,:1000,n~/.vim/viminfo
endif
set suffixes=.aux,.bak,.dvi,.gz,.idx,.log,.ps,.swp,.tar
set wildignore=*.swp,*.bak,*.pyc,*.class

" search
set incsearch	  " do incremental searching
set hlsearch      " highlight search terms
set ignorecase    " ignore case when searching
set smartcase     " if searching and search contains upper case, make case sensitive search
nmap <silent> <leader>/ :nohlsearch<CR>

" Don't use Ex mode, use Q for formatting
map Q gq
nmap Q gqap

set background=light
set hidden


" display
set showmatch
set showcmd       " display incomplete commands
set visualbell    " don't beep
set noerrorbells  " don't beep

nnoremap ; :
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" pasting
nmap <leader>y "*y
nmap <leader>Y "*yy
nmap <leader>p "*p
nmap <leader>r :registers<CR>
nmap <leader>0 "0p
nmap <leader>1 "1p
nmap <leader>2 "2p
nmap <leader>3 "3p
nmap <leader>4 "4p
nmap <leader>5 "5p
nmap <leader>6 "6p
nmap <leader>7 "7p
nmap <leader>8 "8p
nmap <leader>9 "9p

" .vimrc
map <leader>v :sp ~/.vimrc<CR><C-W>_
map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo '.vimrc reloaded'"<CR>

" spelling
set spellfile=~/.vim/spell.add
map <leader>s :setlocal spell! spelllang=pl<CR>
map <leader>S :setlocal spell! spelllang=en_US<CR>

nmap <silent> <leader>n :NERDTreeToggle<CR>
nmap <silent> <leader>g :GundoToggle<CR>
nmap <silent> <leader>c :copen<CR>
nmap <silent> <leader>C :cclose<CR>
nmap <silent> <leader>m :make<CR>
nmap <silent> <leader>; :LustyJuggler<CR>
nmap <silent> <leader>a :Ag<CR>
nmap <silent> <leader>d :YcmCompleter GoToDefinition<CR>
nmap <silent> <leader>r :YcmCompleter GoToReferences<CR>


set magic
set nonumber
set report=0
set ruler
set shortmess=atI
set showmode
set nostartofline
set textwidth=78
" set colorcolumn=78
set ttyfast
set visualbell
set wildchar=<TAB>
set wrapmargin=1
set fileformat=unix
set fileformats=unix,dos,mac
set fileencodings=ucs-bom,utf-8,cp1250,iso8859-2
nnoremap <silent> <F8> :Tlist<Cr>

let g:tex_flavor = "context"

map <F2> :set nu!<CR>
imap <F2> <C-O>:set nu!<CR>

autocmd FileType text setlocal textwidth=78
autocmd FileType xml setlocal noexpandtab tabstop=2
autocmd BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
autocmd BufNewFile,BufRead *.xhtml setf xhtml
autocmd BufNewFile,BufRead *.mako setf mako
autocmd BufNewFile,BufRead *.jinja setf jinja
" Nessus:
let nasl_space_errors = 1
autocmd BufNewFile,BufRead *.audit set syntax=xml
autocmd BufNewFile,BufRead *.nasl set filetype=nasl
autocmd BufNewFile,BufRead *.inc set filetype=nasl
autocmd BufNewFile,BufRead *.inc set indentexpr=

autocmd FileType markdown setlocal spell
autocmd FileType gitcommit setlocal spell

let html_no_rendering=1
let g:closetag_default_xml=1
autocmd FileType html,mako let b:closetag_html_style=1

"
" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

vnoremap > >gv
vnoremap < <gv

inoremap <C-j> <C-o>J

map <F8> :new<CR>:read !hg diff<CR>:set syntax=diff buftype=nofile<CR>gg
map <F7> :new<CR>:read !svn diff<CR>:set syntax=diff buftype=nofile<CR>gg

au FileType python so ~/.vim/scripts/python.vim
map <leader>tn :tabnew %<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 

nmap <C-S-tab> :tabprevious<cr>
nmap <C-tab> :tabnext<cr>
map <C-S-tab> :tabprevious<cr>
map <C-tab> :tabnext<cr>
imap <C-S-tab> <ESC>:tabprevious<cr>i
imap <C-tab> <ESC>:tabnext<cr>i
nmap <C-t> :tabnew<cr>
imap <C-t> <ESC>:tabnew<cr>

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if has("gui_running")
    source ~/.vim/scripts/gui.vim
endif

if &t_Co > 2 || has("gui_running")
    set   t_Co=256
    syntax on
    set nohlsearch
    "let g:seoul256_light_background = 250
    colorscheme lucius
endif
if &term == "screen"
  set t_Co=256
endif

cmap w!! w !sudo tee % >/dev/null

filetype plugin indent on
